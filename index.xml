<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tremor</title><link>/</link><description>Recent content on Tremor</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 22 Feb 2020 20:02:02 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Improving our influx parser - a story in four acts</title><link>/blog/influx-perf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/blog/influx-perf/</guid><description>Influx parsing performance Yesterday we spent the day on a report that our influx parser was slow, it turns out it indeed was.
This is an exciting topic as just a few days ago we gave a talk at BoBKonf 2020 on this topic so this is a great opportunity to show some of the topics and our process in action.
All the topics in this blog are links, the main one above this text is to the pull request, the titles of each section links to the commit that implements the topic discussed.</description></item><item><title>Tremor is now Open Source</title><link>/blog/welcome/</link><pubDate>Sat, 22 Feb 2020 20:02:02 +0000</pubDate><guid>/blog/welcome/</guid><description>The tremor project was released as an Open Source software project on 22nd February 2020 at 20:02:02.
Catch us at BOB2020 on the 28th February 2020 in Berlin where we will be talking about our usage of the Rust programming language to build high performance and high density production systems with Tremor.</description></item><item><title>Talking To Other Systems</title><link>/getting-started/connectivity/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/connectivity/</guid><description>Concept In order to provide a general purpose event processing facility to a broad base of applications, tremor separates processing from connectivity and distribution.
Tremor further separates the syntax of external formats from the implied value type semantics that are useful for filtering, processing, transforming, aggregating or otherwise deriving synthetic events from streams of data ingested by tremor processes.
As tremor is primarily an event processing system we refer to connections to external systems that are logically upstream of tremor as Onramps.</description></item><item><title>Understanding Data</title><link>/getting-started/codecs/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/codecs/</guid><description>Concept Tremor connects to the external systems using connectors.
Connectors that integrate tremor with upstream systems from where tremor is typically ingesting data are called Onramps.
Connectors that integrate tremor with downstream systems where tremor is typically publishing or contributing data to are called Offramps.
Onramps and Offramps use codecs to transform the external wire form of connected system participants into a structured internal value type tremor understands semantically.
Tremor&amp;rsquo;s internal type system is JSON-like.</description></item><item><title>Starting Tremor for the first time</title><link>/getting-started/starting/</link><pubDate>Wed, 05 Feb 2020 13:11:00 +0100</pubDate><guid>/getting-started/starting/</guid><description>Requirements While there are many ways to install Tremor, be it as a package or compiling it form source this quickstart guide will use a Docker image to make it as painless as possible to get a first instance of tremor running.
With that a running versin of Docker on a system with an internet connection is required.
Get Tremor The simplest way to get tremor is downloading the Docker Image.</description></item><item><title>Tremor Applications</title><link>/getting-started/scripting/</link><pubDate>Wed, 05 Feb 2020 13:11:00 +0100</pubDate><guid>/getting-started/scripting/</guid><description>Concept Tremor supports data processing through a directed acyclic graph based pipeline or workflow. Pipelines can be configured via a YAML syntax or via a structured query language.
Pipelines are a graph of operations through which events are routed depth first. Operations in tremor pipelines are pluggable and extensible.
For applications or algorithms that process one event at a time, such as data cleansing, enrichment, normalization, validation and transformation an ETL focused scripting language can be used to program the application logic.</description></item><item><title>Tremor Teams</title><link>/community/teams/</link><pubDate>Wed, 05 Feb 2020 13:11:00 +0100</pubDate><guid>/community/teams/</guid><description>Tremors team structure is heaviley inspired and influenced by rusts governance model.
Moderation (mod) Helping uphold the code of conduct
Members Natali Vlatko Dan Rowe Jordan Chernev Core (core) Direction of the project, subteam leadership, cross-cutting concerns.
Members Anup Dhamala Darach Ennis Heinz Gies Architecture (arch) Overarching architectural concepts, pipeline and concurrency
Members Anup Dhamala Darach Ennis Heinz Gies Language (lang) Designing new language features</description></item><item><title>Good User Experience</title><link>/getting-started/tooling/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/tooling/</guid><description>IDE Integration With the tremor language server tremor comes with advanced support for editing Tremor Script and Tremor Query in both Visual Studio Code and VIM.
To install the tremor-language-server you require rust to be set up on your system and then can simply run cargo install tremor-language-server.
The VS Code extension is available on the Visual Studio Marketplace.
The VIM plugin can be installed from GitHub.
Informative Errors Making errors are human, recently this realisation has gained popularity in the programming community with languages like rust tyring to provide helpful error message beyond a line number and a generic error.</description></item><item><title>Specialize Tremor Pipelines</title><link>/getting-started/specialize/</link><pubDate>Wed, 05 Feb 2020 10:01:00 +0100</pubDate><guid>/getting-started/specialize/</guid><description>Concept Some behaviour is either so performance critical or so specialized that it can&amp;rsquo;t or shouldn&amp;rsquo;t be expressed using Tremor Script.
The solution to this is custom operators. Unlike tremor script that is interpreted at run time they are written in rust and can take advantage of the rust ecosystem and natively compiled perforamnce.
Operators Currently tremor supports the following Operators:
runtime::tremor grouper::bucket generic::backpressure generic::batch Some special Operators also exist</description></item><item><title>Quick Developer Install</title><link>/getting-started/install/</link><pubDate>Tue, 04 Feb 2020 14:01:00 +0100</pubDate><guid>/getting-started/install/</guid><description>Supported Platforms Select the operating system your are developing on.
Mac OS X Linux Windows TypeIs Supported? IDE SupportYes. Macvim or Visual Studio Code DevelopmentYes ProductionNo TypeIs Supported? IDE SupportYes. Vim ( out of the box ) or Visual Studio Code DevelopmentYes ProductionYes TypeIs Supported? IDE SupportYes DevelopmentAccepting contributions ProductionAccepting contributions git clone https://github.com/wayfair-tremor/tremor-runtime.git Setup an IDE / editor VIM Visual Studio Code Other Follow the instructions in the tremor-vim git repository, and ensure your `.</description></item><item><title>Tremor Team</title><link>/company/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/company/</guid><description/></item></channel></rss>